import customtkinter
from customtkinter import CTkFrame
import tkinter.messagebox
import sqlite3
import os
import tkinter
import customtkinter as ctk
import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
from tkcalendar import DateEntry


desktop_path = os.path.expanduser("~/Desktop/")
db_path = os.path.join(desktop_path, "users.db")

desktop_path1 = os.path.expanduser("~/Desktop/")
db_path1 = os.path.join(desktop_path1, "employees.db")


# customtkinter.set_appearance_mode("dark")
customtkinter.set_default_color_theme("blue")

root = customtkinter.CTk()
root.geometry("1280x700")

page1 = customtkinter.CTkFrame(root)

pageStack = []  # Initialize an empty list to store the page objects




user_type = ""

def create_home_page():

    # Restorant sahipleri için çalışmalar yapılacak
    def restorantbutton(frame):
        global user_type
        user_type = "restorant"
        frame.destroy()
        create_login_screen()

    # Supplier için çalışmalar yapılacak.
    def supplierbutton(frame):
        print("Beklemedeyiz")


    home_frame = customtkinter.CTkFrame(master=root)
    home_frame.pack(pady=20, padx=30, fill="both", expand=True)

    label = customtkinter.CTkLabel(master=home_frame, text="Welcome to the Home Page!", anchor="center", font=("Arial", 16, "bold"))
    label.place(relx=0.5, rely=0.4, anchor="center")

    button_frame = customtkinter.CTkFrame(master=home_frame)
    button_frame.place(relx=0.5, rely=0.5, anchor="center")


    systemcolour_frame = customtkinter.CTkFrame(master=home_frame)
    systemcolour_frame.place(relx=0.5, rely=0.6, anchor="center")


    button1 = customtkinter.CTkButton(master=button_frame, text='Supplier', command=lambda: supplierbutton(home_frame),
                                      anchor="center", width=210, height=70, font=('Arial', 22))
    button1.pack(side="left", padx=10)

    button2 = customtkinter.CTkButton(master=button_frame, text='Restourant/Bar',
                                      command=lambda: restorantbutton(home_frame),
                                      anchor="center", width=210, height=70, font=('Arial', 22))
    button2.pack(side="left", padx=10)



    pageStack.append(home_frame)


    def changecolor(value):
        if button2.get() == "Light":
            customtkinter.set_appearance_mode("light")
        else:
            customtkinter.set_appearance_mode("dark")

    b = ("Arial", 12, "bold")
    button2 = customtkinter.CTkOptionMenu(master=systemcolour_frame, values=["Light", "Dark"], command=changecolor,
                                          anchor="center", font=b)
    button2.pack(anchor='center', padx=10, pady=10)
    button2.set("System Color")




def signup(frame):
    global user_type
    frame.destroy()
    signup_window()



def create_login_screen():

    if pageStack:
        current_frame = pageStack.pop()
        current_frame.destroy()


    main_frame: CTkFrame = customtkinter.CTkFrame(master=root)
    main_frame.pack(pady=20, padx=30, fill="both", expand=True)


    label = customtkinter.CTkLabel(master=main_frame, text="R/B/C Login Screen", anchor="center", font=("Helvetica", 13, "bold"))
    label.pack(pady=12, padx=10)

    entry1 = customtkinter.CTkEntry(master=main_frame, placeholder_text="Username")
    entry1.pack(pady=12, padx=10)

    entry2 = customtkinter.CTkEntry(master=main_frame, placeholder_text="Password", show="*")
    entry2.pack(pady=12, padx=10)


    root.current_frame = main_frame




    def login(frame):
        # Retrieve the username and password entered by the user
        username = entry1.get()
        password = entry2.get()

        # Connect to the database
        conn = sqlite3.connect(db_path)

        # Check if the username and password match with the values stored in the database
        c = conn.cursor()
        c.execute("SELECT * FROM users WHERE username=? AND password=?", (username, password))
        result = c.fetchone()




    # Close the database connection
        conn.close()

    # If the username and password match, show a success message and create main screen
        if result is not None:
            user_type = result[2]

            # Kullanıcının tipine göre sayfa açılması belirlendi
            if user_type == "restorant":
                frame.destroy()
                create_restaurant_page()
            elif user_type == "supplier":
                frame.destroy()
                create_supplier_page()
            else:
                tkinter.messagebox.showerror(title="Login error", message="Invalid username or password!")
        else:
            tkinter.messagebox.showerror(title="Login error", message="Invalid username or password!")

    button = customtkinter.CTkButton(master=main_frame, text='Login', command=lambda : login(main_frame), anchor="center")
    button.pack(pady=12, padx=10)

    signup_button = customtkinter.CTkButton(master=main_frame, text='Sign up', command=lambda: signup(main_frame),
                                        anchor="center")
    signup_button.pack(pady=12, padx=10)

    checkbox = customtkinter.CTkCheckBox(master=main_frame, text="Remember Me")
    checkbox.pack(pady=12, padx=10)



def increase_font_size(widget, font_size):
    """Gelen widget'ın yazı fontunu, verilen boyutta arttırır."""
    font = widget.cget("font")
    font_name, font_size_info, font_style = font.split()
    font_size = int(font_size_info) + font_size
    widget.config(font=(font_name, font_size, font_style))

def switch_to_restaurant_page():

    # mevcut sayfayı kapat
    for widget in root.winfo_children():
        widget.destroy()

    # İşletme profilini girmek için bir çerçeve oluştur
    profile_frame = ctk.CTkFrame(root)
    profile_frame.pack()



    profile_frame.grid_columnconfigure(0, weight=1)
    profile_frame.grid_columnconfigure(1, weight=1)
    profile_frame.grid_columnconfigure(2, weight=1)
    profile_frame.grid_columnconfigure(3, weight=1)



    # İşletme adı alanını oluştur
    name_label = ctk.CTkLabel(profile_frame, text="İşletme Adı:")
    name_label.grid(row=0, column=0, sticky="w")
    name_entry = ctk.CTkEntry(profile_frame)
    name_entry.grid(row=0, column=1)

    # İşletme sahibi ve yöneticilerinin isimleri ve iletişim bilgilerini girmek için alanlar oluştur
    owner_label = ctk.CTkLabel(profile_frame, text="İşletme Sahibi ve Yöneticileri:")
    owner_label.grid(row=1, column=0, sticky="w")
    owner_entry = customtkinter.CTkEntry(profile_frame)
    owner_entry.grid(row=1, column=1)

    # İşletme adresi ve konumu için alanlar oluştur
    address_label = customtkinter.CTkLabel(profile_frame, text="İşletme Adresi:")
    address_label.grid(row=2, column=2, sticky="w")
    address_entry = customtkinter.CTkEntry(profile_frame)
    address_entry.grid(row=2, column=3)

    location_label = ctk.CTkLabel(profile_frame, text="İşletme Konumu:")
    location_label.grid(row=3, column=2, sticky="w")
    location_entry = ctk.CTkEntry(profile_frame)
    location_entry.grid(row=3, column=3)

    # İşletmenin faaliyet gösterdiği sektörü girmek için alan oluştur
    industry_label = ctk.CTkLabel(profile_frame, text="Faaliyet Gösterilen Sektör:")
    industry_label.grid(row=4, column=0, sticky="w")
    industry_entry = ctk.CTkEntry(profile_frame)
    industry_entry.grid(row=4, column=1)

    # İşletmenin web sitesi, e-posta adresi ve telefon numarasını girmek için alanlar oluştur
    website_label = ctk.CTkLabel(profile_frame, text="Web Sitesi:")
    website_label.grid(row=5, column=0, sticky="w")
    website_entry = ctk.CTkEntry(profile_frame)
    website_entry.grid(row=5, column=1)

    email_label = ctk.CTkLabel(profile_frame, text="E-posta Adresi:")
    email_label.grid(row=6, column=0, sticky="w")
    email_entry = ctk.CTkEntry(profile_frame)
    email_entry.grid(row=6, column=1)

    phone_label = ctk.CTkLabel(profile_frame, text="Telefon Numarası:")
    phone_label.grid(row=7, column=0, sticky="w")
    phone_entry = ctk.CTkEntry(profile_frame)
    phone_entry.grid(row=7, column=1)

    closing_label = ctk.CTkLabel(profile_frame, text="Kapanış Saati:")
    closing_label.grid(row=9, column=0, sticky="w")
    closing_entry = ctk.CTkEntry(profile_frame)
    closing_entry.grid(row=9, column=1)



    services_label = ctk.CTkLabel(profile_frame, text="Hizmet Verilen Ürün/Hizmetler:")
    services_label.grid(row=10, column=0, sticky="w")
    services_entry = ctk.CTkEntry(profile_frame)
    services_entry.grid(row=10, column=1)


    employees_label = ctk.CTkLabel(profile_frame, text="Çalışan Sayısı:")
    employees_label.grid(row=11, column=0, sticky="w")
    employees_entry = ctk.CTkEntry(profile_frame)
    employees_entry.grid(row=11, column=1)


    social_label = ctk.CTkLabel(profile_frame, text="Sosyal Medya Hesapları:")
    social_label.grid(row=12, column=0, sticky="w")

    facebook_label = ctk.CTkLabel(profile_frame, text="Facebook:")
    facebook_label.grid(row=13, column=0, sticky="w")
    facebook_entry = ctk.CTkEntry(profile_frame)
    facebook_entry.grid(row=13, column=1)

    twitter_label = ctk.CTkLabel(profile_frame, text="Twitter:")
    twitter_label.grid(row=14, column=0, sticky="w")
    twitter_entry = ctk.CTkEntry(profile_frame)
    twitter_entry.grid(row=14, column=1)

    instagram_label = ctk.CTkLabel(profile_frame, text="Instagram:")
    instagram_label.grid(row=15, column=0, sticky="w")
    instagram_entry = ctk.CTkEntry(profile_frame)
    instagram_entry.grid(row=15, column=1)


    profile_frame.grid_columnconfigure(0, weight=1)
    profile_frame.grid_columnconfigure(1, weight=1)

    name_entry.configure(width=40)


    def save_profile():

    # Alınan verileri kullanarak işletme profilini kaydet
        data = {
            "name": name_entry.get(),
            "owner": owner_entry.get(),
            "address": address_entry.get(),
            "location": location_entry.get(),
            "industry": industry_entry.get(),
            "website": website_entry.get(),
            "email": email_entry.get(),
            "phone": phone_entry.get(),
            "opening": opening_entry.get(),
            "closing": closing_entry.get(),
            "services": services_entry.get(),
            "employees": employees_entry.get(),
            "facebook": facebook_entry.get(),
            "twitter": twitter_entry.get(),
            "instagram": instagram_entry.get()
                }







def show_attendance(frame):
    # Yeni pencere yaratma
    new_window = customtkinter.CTkToplevel(root)

    # Yeni pencere özellikleri
    new_window.title("Attendance Record")
    new_window.geometry("600x600")

    customtkinter.CTkLabel(master=new_window, text="Employee Number:", anchor="w").grid(row=0, column=0, padx=10,
                                                                                        pady=10)
    emp_num_entry = customtkinter.CTkEntry(master=new_window, width=100)
    emp_num_entry.grid(row=0, column=1, padx=10, pady=10)

    customtkinter.CTkLabel(master=new_window, text="Date:", anchor="w").grid(row=1, column=0, padx=10, pady=10)
    date_entry = DateEntry(master=new_window, width=12, background='darkblue', foreground='white', borderwidth=2)
    date_entry.grid(row=1, column=1, padx=10, pady=10)

    customtkinter.CTkLabel(master=new_window, text="Time In:", anchor="w").grid(row=2, column=0, padx=10, pady=10)
    time_in_entry = customtkinter.CTkEntry(master=new_window, width=100)
    time_in_entry.grid(row=2, column=1, padx=10, pady=10)

    customtkinter.CTkLabel(master=new_window, text="Time Out:", anchor="w").grid(row=3, column=0, padx=10, pady=10)
    time_out_entry = customtkinter.CTkEntry(master=new_window, width=100)
    time_out_entry.grid(row=3, column=1, padx=10, pady=10)

    save_button = customtkinter.CTkButton(master=new_window, text="Save",
                                          command=lambda: self.save_attendance(emp_num_entry.get(),
                                                                               date_entry.get(),
                                                                               time_in_entry.get(),
                                                                               time_out_entry.get()))

    save_button.grid(row=4, column=0, columnspan=2, pady=20, padx=10)


def save_attendance(self, emp_num, date, time_in, time_out):
    try:
        # Yeni kayıt ekle
        query = "INSERT INTO attendances (emp_num, date, time_in, time_out) VALUES (?, ?, ?, ?)"
        self.cursor.execute(query, (emp_num, date, time_in, time_out))
        self.connection.commit()
        messagebox.showinfo("Success", "Attendance record has been saved successfully.")
    except Exception as e:
        messagebox.showerror("Error", f"An error occurred while saving attendance record: {e}")
    finally:
        emp_num_entry.delete(0, tk.END)
        date_entry.delete(0, tk.END)
        time_in_entry.delete(0, tk.END)
        time_out_entry.delete(0, tk.END)
        emp_num_entry.focus_set()










def employee_profile(frame):
    # Yeni pencere yaratma
    new_window = customtkinter.CTkToplevel(root)

    # Yeni pencere özellikleri
    new_window.title("Employee Profile")
    new_window.geometry("600x600")

    # Pencere içeriği
    customtkinter.CTkLabel(master=new_window, text="Employee Number:").grid(row=0, column=0, padx=10, pady=10)
    emp_num_entry = customtkinter.CTkEntry(master=new_window, width=100)
    emp_num_entry.grid(row=0, column=1, padx=10, pady=10)

    customtkinter.CTkLabel(master=new_window, text="Employee Name:").grid(row=1, column=0, padx=10, pady=10)
    emp_name_entry = customtkinter.CTkEntry(master=new_window, width=100)
    emp_name_entry.grid(row=1, column=1, padx=10, pady=10)

    customtkinter.CTkLabel(master=new_window, text="Employee Age:").grid(row=2, column=0, padx=10, pady=10)
    emp_age_entry = customtkinter.CTkEntry(master=new_window, width=100)
    emp_age_entry.grid(row=2, column=1, padx=10, pady=10)

    customtkinter.CTkLabel(master=new_window, text="Weekly Hours:").grid(row=3, column=0, padx=10, pady=10)
    weekly_hours_entry = customtkinter.CTkEntry(master=new_window, width=100)
    weekly_hours_entry.grid(row=3, column=1, padx=10, pady=10)

    customtkinter.CTkLabel(master=new_window, text="Hourly Rate:").grid(row=4, column=0, padx=10, pady=10)
    hourly_rate_entry = customtkinter.CTkEntry(master=new_window, width=100)
    hourly_rate_entry.grid(row=4, column=1, padx=10, pady=10)

    save_button = customtkinter.CTkButton(master=new_window, text="Save",
                                          command=lambda: save_employee_profile(emp_num_entry.get(),
                                                                                emp_name_entry.get(),
                                                                                emp_age_entry.get(),
                                                                                weekly_hours_entry.get(),
                                                                                hourly_rate_entry.get()))
    save_button.grid(row=5, column=0, columnspan=2, pady=20)


def save_employee_profile(emp_num, emp_name, emp_age, weekly_hours, hourly_rate):


    # Veritabanı bağlantısı oluşturma
    conn = sqlite3.connect('employees.db')
    c = conn.cursor()

    # INSERT sorgusunu hazırlama ve çalıştırma
    c.execute("INSERT INTO employees (emp_num, emp_name, emp_age, weekly_hours, hourly_rate) VALUES (?, ?, ?, ?, ?)",
              (emp_num, emp_name, emp_age, weekly_hours, hourly_rate))

    # Veritabanı değişikliklerini kaydetme ve bağlantıyı kapatma
    conn.commit()
    conn.close()


    tkinter.messagebox.showinfo(title="Success", message="Employee created successfully!")



def show_menu(frame):
    # Menü çerçevesi oluşturma



    menu_frame = customtkinter.CTkFrame(master=root)
    menu_frame.pack(fill="both", expand=True)
    button_width = 200
    button_height = 200
    button_font = ("Arial", 15, "bold")

    menu_button = customtkinter.CTkButton(master=menu_frame, text='Create Employee Profile', width=button_width,
                                        height=button_height, font=button_font,
                                        command=lambda: employee_profile(frame), anchor="center")
    menu_button.pack(side="left", padx=10)

    menu_button = customtkinter.CTkButton(master=menu_frame, text='Create Employee Time-Tracking', width=button_width,
                                        height=button_height, font=button_font,
                                        command=lambda: show_attendance(frame), anchor="center")
    menu_button.pack(side="left", padx=10)



def create_restaurant_page():
    restaurant_frame = customtkinter.CTkFrame(master=root)
    restaurant_frame.pack(pady=20, padx=30, fill="both", expand=True)

    label = customtkinter.CTkLabel(master=restaurant_frame, text="Restaurant Home Page", anchor="center",
                                   font=("Helvetica", 13, "bold"))
    label.pack(pady=12, padx=10)

    button_frame = customtkinter.CTkFrame(master=restaurant_frame)
    button_frame.pack(pady=12, padx=10)

    button_width = 200
    button_height = 200
    button_font = ("Arial", 15, "bold")

    menu_button = customtkinter.CTkButton(master=button_frame, text='Restaurant Profil', width=button_width,
                                          height=button_height, font=button_font,
                                          command=switch_to_restaurant_page, anchor="center")
    menu_button.pack(side="left", padx=10)

    menu_button = customtkinter.CTkButton(master=button_frame, text='Employee Tracking', width=button_width,
                                          height=button_height, font=button_font,
                                          command=lambda: show_menu(restaurant_frame), anchor="center")
    menu_button.pack(side="left", padx=10)

    menu_button = customtkinter.CTkButton(master=button_frame, text='Supplier Comparasion', width=button_width,
                                          height=button_height, font=button_font,
                                          command=lambda: show_menu(restaurant_frame), anchor="center")
    menu_button.pack(side="left", padx=10)

    menu_button = customtkinter.CTkButton(master=button_frame, text='Reports', width=button_width, height=button_height,
                                          font=button_font, command=lambda: show_menu(restaurant_frame),
                                          anchor="center")
    menu_button.pack(side="left", padx=10)

    pageStack.append(restaurant_frame)









def signup_window():

    signup_frame = customtkinter.CTkFrame(master=root)
    signup_frame.pack(pady=20, padx=30, fill="both", expand=True)

    signup_label = customtkinter.CTkLabel(master=signup_frame, text="Create a new account", anchor="center",
                                          font=("Helvetica", 13, "bold"))
    signup_label.pack(pady=12, padx=10)

    signup_entry1 = customtkinter.CTkEntry(master=signup_frame, placeholder_text="Enter username")
    signup_entry1.pack(pady=12, padx=10)

    signup_entry2 = customtkinter.CTkEntry(master=signup_frame, placeholder_text="Enter password", show="*")
    signup_entry2.pack(pady=12, padx=10)

    signup_entry3 = customtkinter.CTkEntry(master=signup_frame, placeholder_text="Re-enter password", show="*")
    signup_entry3.pack(pady=12, padx=10)

    def signup():
        global user_type
        if signup_entry2.get() != signup_entry3.get():
            tkinter.messagebox.showerror(title="Password error", message="Passwords do not match!")
        else:

            conn = sqlite3.connect(db_path)
            c = conn.cursor()
            c.execute("CREATE TABLE IF NOT EXISTS users (username TEXT, password TEXT, user_type TEXT)")
            c.execute("INSERT INTO users VALUES (?, ?,? )", (signup_entry1.get(), signup_entry2.get(), user_type))
            conn.commit()
            conn.close()
            tkinter.messagebox.showinfo(title="Success", message="Account created successfully!")
            signup_frame.destroy()
            create_login_screen()

    def cancel():
        signup_frame.destroy()
        create_login_screen()

    signup_button = customtkinter.CTkButton(master=signup_frame, text='Create account', command=signup, anchor="center")
    signup_button.pack(pady=12, padx=10)

    cancel_button = customtkinter.CTkButton(master=signup_frame, text='Cancel', command=cancel, anchor="center")
    cancel_button.pack(pady=12, padx=10)





    pageStack.append(signup_frame)

create_home_page()


root.mainloop()